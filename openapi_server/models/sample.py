# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
import re
from openapi_server import util

import re  # noqa: E501

class Sample(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, experiment_id=None, isolate_id=None, id=None):  # noqa: E501
        """Sample - a model defined in OpenAPI

        :param experiment_id: The experiment_id of this Sample.  # noqa: E501
        :type experiment_id: str
        :param isolate_id: The isolate_id of this Sample.  # noqa: E501
        :type isolate_id: str
        :param id: The id of this Sample.  # noqa: E501
        :type id: str
        """
        self.openapi_types = {
            'experiment_id': str,
            'isolate_id': str,
            'id': str
        }

        self.attribute_map = {
            'experiment_id': 'experiment-id',
            'isolate_id': 'isolate-id',
            'id': 'id'
        }

        self._experiment_id = experiment_id
        self._isolate_id = isolate_id
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'Sample':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Sample of this Sample.  # noqa: E501
        :rtype: Sample
        """
        return util.deserialize_model(dikt, cls)

    @property
    def experiment_id(self):
        """Gets the experiment_id of this Sample.


        :return: The experiment_id of this Sample.
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """Sets the experiment_id of this Sample.


        :param experiment_id: The experiment_id of this Sample.
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def isolate_id(self):
        """Gets the isolate_id of this Sample.


        :return: The isolate_id of this Sample.
        :rtype: str
        """
        return self._isolate_id

    @isolate_id.setter
    def isolate_id(self, isolate_id):
        """Sets the isolate_id of this Sample.


        :param isolate_id: The isolate_id of this Sample.
        :type isolate_id: str
        """

        self._isolate_id = isolate_id

    @property
    def id(self):
        """Gets the id of this Sample.


        :return: The id of this Sample.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sample.


        :param id: The id of this Sample.
        :type id: str
        """
        if id is not None and not re.search(r'^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$/`")  # noqa: E501

        self._id = id
