# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.processing_status import ProcessingStatus
from openapi_server import util

from openapi_server.models.processing_status import ProcessingStatus  # noqa: E501

class Status(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, de_contamination=None, qc=None, variant_calling=None, prediction=None, bigsi_building=None, distance_calculation=None, stage=None):  # noqa: E501
        """Status - a model defined in OpenAPI

        :param de_contamination: The de_contamination of this Status.  # noqa: E501
        :type de_contamination: ProcessingStatus
        :param qc: The qc of this Status.  # noqa: E501
        :type qc: ProcessingStatus
        :param variant_calling: The variant_calling of this Status.  # noqa: E501
        :type variant_calling: ProcessingStatus
        :param prediction: The prediction of this Status.  # noqa: E501
        :type prediction: ProcessingStatus
        :param bigsi_building: The bigsi_building of this Status.  # noqa: E501
        :type bigsi_building: ProcessingStatus
        :param distance_calculation: The distance_calculation of this Status.  # noqa: E501
        :type distance_calculation: ProcessingStatus
        :param stage: The stage of this Status.  # noqa: E501
        :type stage: str
        """
        self.openapi_types = {
            'de_contamination': ProcessingStatus,
            'qc': ProcessingStatus,
            'variant_calling': ProcessingStatus,
            'prediction': ProcessingStatus,
            'bigsi_building': ProcessingStatus,
            'distance_calculation': ProcessingStatus,
            'stage': str
        }

        self.attribute_map = {
            'de_contamination': 'de-contamination',
            'qc': 'qc',
            'variant_calling': 'variant-calling',
            'prediction': 'prediction',
            'bigsi_building': 'bigsi-building',
            'distance_calculation': 'distance-calculation',
            'stage': 'stage'
        }

        self._de_contamination = de_contamination
        self._qc = qc
        self._variant_calling = variant_calling
        self._prediction = prediction
        self._bigsi_building = bigsi_building
        self._distance_calculation = distance_calculation
        self._stage = stage

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def de_contamination(self):
        """Gets the de_contamination of this Status.


        :return: The de_contamination of this Status.
        :rtype: ProcessingStatus
        """
        return self._de_contamination

    @de_contamination.setter
    def de_contamination(self, de_contamination):
        """Sets the de_contamination of this Status.


        :param de_contamination: The de_contamination of this Status.
        :type de_contamination: ProcessingStatus
        """
        if de_contamination is None:
            raise ValueError("Invalid value for `de_contamination`, must not be `None`")  # noqa: E501

        self._de_contamination = de_contamination

    @property
    def qc(self):
        """Gets the qc of this Status.


        :return: The qc of this Status.
        :rtype: ProcessingStatus
        """
        return self._qc

    @qc.setter
    def qc(self, qc):
        """Sets the qc of this Status.


        :param qc: The qc of this Status.
        :type qc: ProcessingStatus
        """
        if qc is None:
            raise ValueError("Invalid value for `qc`, must not be `None`")  # noqa: E501

        self._qc = qc

    @property
    def variant_calling(self):
        """Gets the variant_calling of this Status.


        :return: The variant_calling of this Status.
        :rtype: ProcessingStatus
        """
        return self._variant_calling

    @variant_calling.setter
    def variant_calling(self, variant_calling):
        """Sets the variant_calling of this Status.


        :param variant_calling: The variant_calling of this Status.
        :type variant_calling: ProcessingStatus
        """
        if variant_calling is None:
            raise ValueError("Invalid value for `variant_calling`, must not be `None`")  # noqa: E501

        self._variant_calling = variant_calling

    @property
    def prediction(self):
        """Gets the prediction of this Status.


        :return: The prediction of this Status.
        :rtype: ProcessingStatus
        """
        return self._prediction

    @prediction.setter
    def prediction(self, prediction):
        """Sets the prediction of this Status.


        :param prediction: The prediction of this Status.
        :type prediction: ProcessingStatus
        """
        if prediction is None:
            raise ValueError("Invalid value for `prediction`, must not be `None`")  # noqa: E501

        self._prediction = prediction

    @property
    def bigsi_building(self):
        """Gets the bigsi_building of this Status.


        :return: The bigsi_building of this Status.
        :rtype: ProcessingStatus
        """
        return self._bigsi_building

    @bigsi_building.setter
    def bigsi_building(self, bigsi_building):
        """Sets the bigsi_building of this Status.


        :param bigsi_building: The bigsi_building of this Status.
        :type bigsi_building: ProcessingStatus
        """
        if bigsi_building is None:
            raise ValueError("Invalid value for `bigsi_building`, must not be `None`")  # noqa: E501

        self._bigsi_building = bigsi_building

    @property
    def distance_calculation(self):
        """Gets the distance_calculation of this Status.


        :return: The distance_calculation of this Status.
        :rtype: ProcessingStatus
        """
        return self._distance_calculation

    @distance_calculation.setter
    def distance_calculation(self, distance_calculation):
        """Sets the distance_calculation of this Status.


        :param distance_calculation: The distance_calculation of this Status.
        :type distance_calculation: ProcessingStatus
        """
        if distance_calculation is None:
            raise ValueError("Invalid value for `distance_calculation`, must not be `None`")  # noqa: E501

        self._distance_calculation = distance_calculation

    @property
    def stage(self):
        """Gets the stage of this Status.


        :return: The stage of this Status.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this Status.


        :param stage: The stage of this Status.
        :type stage: str
        """
        allowed_values = ["accepted", "qc-failed", "live", "deprecated"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage
