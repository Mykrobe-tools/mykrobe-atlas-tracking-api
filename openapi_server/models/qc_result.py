# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class QcResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coverage=None, tbc=None, decision=None):  # noqa: E501
        """QcResult - a model defined in OpenAPI

        :param coverage: The coverage of this QcResult.  # noqa: E501
        :type coverage: int
        :param tbc: The tbc of this QcResult.  # noqa: E501
        :type tbc: str
        :param decision: The decision of this QcResult.  # noqa: E501
        :type decision: str
        """
        self.openapi_types = {
            'coverage': int,
            'tbc': str,
            'decision': str
        }

        self.attribute_map = {
            'coverage': 'coverage',
            'tbc': 'tbc',
            'decision': 'decision'
        }

        self._coverage = coverage
        self._tbc = tbc
        self._decision = decision

    @classmethod
    def from_dict(cls, dikt) -> 'QcResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QcResult of this QcResult.  # noqa: E501
        :rtype: QcResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coverage(self):
        """Gets the coverage of this QcResult.


        :return: The coverage of this QcResult.
        :rtype: int
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage):
        """Sets the coverage of this QcResult.


        :param coverage: The coverage of this QcResult.
        :type coverage: int
        """
        if coverage is None:
            raise ValueError("Invalid value for `coverage`, must not be `None`")  # noqa: E501

        self._coverage = coverage

    @property
    def tbc(self):
        """Gets the tbc of this QcResult.


        :return: The tbc of this QcResult.
        :rtype: str
        """
        return self._tbc

    @tbc.setter
    def tbc(self, tbc):
        """Sets the tbc of this QcResult.


        :param tbc: The tbc of this QcResult.
        :type tbc: str
        """
        if tbc is None:
            raise ValueError("Invalid value for `tbc`, must not be `None`")  # noqa: E501

        self._tbc = tbc

    @property
    def decision(self):
        """Gets the decision of this QcResult.


        :return: The decision of this QcResult.
        :rtype: str
        """
        return self._decision

    @decision.setter
    def decision(self, decision):
        """Sets the decision of this QcResult.


        :param decision: The decision of this QcResult.
        :type decision: str
        """
        allowed_values = ["pass", "fail"]  # noqa: E501
        if decision not in allowed_values:
            raise ValueError(
                "Invalid value for `decision` ({0}), must be one of {1}"
                .format(decision, allowed_values)
            )

        self._decision = decision
